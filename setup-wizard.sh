#!/bin/bash

# SmartProBono Lite - Interactive Setup Wizard
# This script helps you configure your environment variables

echo "╔════════════════════════════════════════════════════╗"
echo "║   SmartProBono Lite - Setup Wizard 🎯             ║"
echo "╚════════════════════════════════════════════════════╝"
echo ""

# Check if .env.local already exists
if [ -f .env.local ]; then
    echo "⚠️  .env.local already exists!"
    read -p "Do you want to overwrite it? (y/N): " overwrite
    if [[ ! $overwrite =~ ^[Yy]$ ]]; then
        echo "❌ Setup cancelled. Your existing .env.local was not modified."
        exit 0
    fi
    mv .env.local .env.local.backup
    echo "✅ Backed up existing file to .env.local.backup"
fi

echo ""
echo "Let's set up your environment step by step..."
echo ""

# ===== DEMO MODE OPTION =====
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🚀 Quick Start Option"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Would you like to start in DEMO MODE?"
echo "(Works immediately, no API keys needed - you can add them later)"
echo ""
read -p "Start in demo mode? (Y/n): " demo_mode

if [[ $demo_mode =~ ^[Nn]$ ]]; then
    # Full setup
    echo ""
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "📊 Supabase Configuration"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "Have you created a Supabase project? (https://supabase.com)"
    read -p "Continue with Supabase setup? (y/N): " supabase_setup
    
    if [[ $supabase_setup =~ ^[Yy]$ ]]; then
        echo ""
        read -p "Enter your Supabase Project URL: " supabase_url
        read -p "Enter your Supabase Anon Key: " supabase_anon
        read -p "Enter your Supabase Service Role Key: " supabase_service
    else
        supabase_url=""
        supabase_anon=""
        supabase_service=""
    fi

    echo ""
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "🤖 AI Provider Configuration"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "Choose your AI provider:"
    echo "  1) Hugging Face (FREE - 30k requests/month)"
    echo "  2) Groq (FREE - 14k requests/day)"
    echo "  3) Demo Mode (Fallback responses)"
    echo ""
    read -p "Enter choice (1-3): " ai_choice

    case $ai_choice in
        1)
            echo ""
            echo "Get your Hugging Face token at: https://huggingface.co/settings/tokens"
            read -p "Enter your Hugging Face API key: " hf_key
            ai_provider="huggingface"
            ;;
        2)
            echo ""
            echo "Get your Groq API key at: https://console.groq.com"
            read -p "Enter your Groq API key: " groq_key
            ai_provider="groq"
            ;;
        3)
            ai_provider="fallback"
            ;;
        *)
            echo "Invalid choice. Using fallback mode."
            ai_provider="fallback"
            ;;
    esac
else
    # Demo mode
    ai_provider="fallback"
    supabase_url=""
    supabase_anon=""
    supabase_service=""
fi

# ===== CREATE .env.local FILE =====
echo ""
echo "✍️  Creating .env.local file..."

cat > .env.local << EOF
# =========================================
# SmartProBono Lite - Environment Variables
# Generated by setup wizard
# =========================================

EOF

# Add Supabase config if provided
if [ -n "$supabase_url" ]; then
    cat >> .env.local << EOF
# ===== SUPABASE CONFIGURATION =====
NEXT_PUBLIC_SUPABASE_URL=$supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=$supabase_anon
SUPABASE_SERVICE_ROLE_KEY=$supabase_service

EOF
else
    cat >> .env.local << EOF
# ===== SUPABASE CONFIGURATION =====
# Add your Supabase keys here (optional for demo mode)
# NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
# NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key
# SUPABASE_SERVICE_ROLE_KEY=your_service_role_key

EOF
fi

# Add AI provider config
cat >> .env.local << EOF
# ===== AI PROVIDER CONFIGURATION =====
EOF

case $ai_provider in
    huggingface)
        cat >> .env.local << EOF
HUGGINGFACE_API_KEY=$hf_key
AI_PROVIDER=huggingface
EOF
        ;;
    groq)
        cat >> .env.local << EOF
GROQ_API_KEY=$groq_key
AI_PROVIDER=groq
EOF
        ;;
    fallback)
        cat >> .env.local << EOF
AI_PROVIDER=fallback
# Add your AI keys later:
# HUGGINGFACE_API_KEY=your_token
# or
# GROQ_API_KEY=your_key
EOF
        ;;
esac

cat >> .env.local << EOF

# ===== DEVELOPMENT =====
NODE_ENV=development
EOF

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "✅ Setup Complete!"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "📁 Created: .env.local"
echo ""

if [ "$ai_provider" = "fallback" ]; then
    echo "🎯 Running in DEMO MODE"
    echo ""
    echo "Next steps:"
    echo "  1. Start the dev server: npm run dev"
    echo "  2. Visit: http://localhost:3000"
    echo "  3. Try the dashboard to test Ermi!"
    echo ""
    echo "💡 To enable real AI later:"
    echo "   - Edit .env.local"
    echo "   - Add your Hugging Face or Groq API key"
    echo "   - Restart the server"
else
    echo "🤖 AI Provider: $ai_provider"
    echo ""
    echo "Next steps:"
    if [ -z "$supabase_url" ]; then
        echo "  1. Set up Supabase (see SUPABASE_SETUP_GUIDE.md)"
        echo "  2. Run database schema: supabase/production-schema.sql"
        echo "  3. Add Supabase keys to .env.local"
        echo "  4. Start the dev server: npm run dev"
    else
        echo "  1. Run database schema in Supabase SQL Editor"
        echo "     File: supabase/production-schema.sql"
        echo "  2. Start the dev server: npm run dev"
        echo "  3. Visit: http://localhost:3000"
    fi
fi

echo ""
echo "📚 Documentation:"
echo "   - ENVIRONMENT_SETUP.md (detailed setup guide)"
echo "   - SUPABASE_SETUP_GUIDE.md (Supabase instructions)"
echo "   - FREE_AI_SETUP.md (AI provider options)"
echo ""
echo "🎉 SmartProBono Lite is ready!"
echo ""

